version: "3.3"
services:
  # Message queue required by Celery
  rabbitmq:
     image: rabbitmq:3.8-management
     restart: always
     env_file:
        - .env
        - .config
     ports:
       - "5672:5672"
       - "15672:15672"

  neo4j:
    image: neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4jdata:/data
    env_file:
      - .env
      - .config

  api:
    build: ./backend
    ports:
      - "443:443"
    depends_on:
      - neo4j
      - minio
    volumes:
      - data:/data
    command:  sh -c "./wait && ./start.sh"
    restart: always
    tty: true
    privileged: true
    environment:
      WAIT_HOSTS: neo4j:7474, neo4j:7687, minio:9000
      PYTHONUNBUFFERED: 1
    env_file:
      - .env
      - .config

  # Celery worker that does schema matching jobs
  celery-worker:
    build: ./backend
    volumes:
      - data:/data
    restart: always
    environment:
      - PYTHONUNBUFFERED=1
    env_file:
      - .env
      - .config
    command: celery -A backend.celery worker -l INFO --concurrency=1
    depends_on:
      - rabbitmq

  # In-memory store with persistence used for storing celery task information/statuses
  redis:
    image: redis/redis-stack-server:latest
    environment:
      - REDIS_ARGS=--maxmemory 512mb --requirepass redis
    env_file:
      - .env
      - .config
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data

  # Profiler which determines the primary-key foreign-key constraints
  metanome:
   build: ./metanome
   expose:
     - 443
   ports:
     - "8080:8080"
   command:  sh -c "./start"
   restart: always
   tty: true
   privileged: true
   environment:
     WAIT_HOSTS: elastic:9200, neo4j:7474, neo4j:7687
   env_file:
     - .env
     - .config

volumes:
  neo4jdata:
  redisdata:
  data:
