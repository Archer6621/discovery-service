{"swagger": "2.0", "basePath": "/", "paths": {"/add-table": {"parameters": [{"description": "The id of the asset to get the table from", "in": "query", "type": "string", "required": "true", "name": "asset_id"}], "get": {"responses": {"404": {"description": "Table or asset does not exist"}, "204": {"description": "Table in asset was already processed"}, "400": {"description": "Missing asset id query parameter"}}, "description": "Initiates ingestion and profiling for the table in the given asset.", "operationId": "get_add_table", "tags": ["default"]}}, "/filter-connections": {"get": {"responses": {"200": {"description": "Success", "schema": {"$ref": "#/definitions/DeletedRelations"}}}, "description": "Filters spurious connections. This step is required after the ingestion phase.", "operationId": "get_filter_connections", "tags": ["default"]}}, "/get-joinable": {"parameters": [{"description": "The id of the asset to get the table from", "in": "query", "type": "string", "required": "true", "name": "asset_id"}], "get": {"responses": {"404": {"description": "Table or table does not exist"}, "400": {"description": "Missing asset id query parameter"}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/JoinableTables"}}}, "description": "Gets all assets that are joinable with the given source asset.", "operationId": "get_get_joinable", "tags": ["default"]}}, "/get-related": {"parameters": [{"description": "The id of the asset to get the table from as source", "in": "query", "type": "string", "required": "true", "name": "source_asset_id"}, {"description": "The id of the asset to get the table from as target", "in": "query", "type": "array", "items": {"type": "string"}, "required": "true", "name": "target_asset_ids"}], "get": {"responses": {"404": {"description": "Table in asset does not exist"}, "403": {"description": "Source asset id is among target asset ids"}, "400": {"description": "Missing asset ids query parameters"}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/RelatedTables"}}}, "description": "Get all the assets on the path connecting the source and the target tables.", "operationId": "get_get_related_nodes", "tags": ["default"]}}, "/get-table-csv": {"parameters": [{"description": "The id of the asset to get the table from", "in": "query", "type": "string", "required": "true", "name": "asset_id"}, {"description": "Number of rows to get from the top", "in": "query", "type": "string", "required": "true", "name": "rows"}], "get": {"responses": {"404": {"description": "Table in asset does not exist"}, "400": {"description": "Missing asset id or rows query parameters"}}, "description": "Gets a part of the table at the given path as CSV.", "operationId": "get_get_table_csv", "tags": ["default"]}}, "/ingest-data": {"get": {"responses": {"204": {"description": "No data on volume"}, "202": {"description": "Success, processing in backend", "schema": {"$ref": "#/definitions/TaskId"}}}, "description": "Ingest all the data present in the data volume.", "operationId": "get_ingest_data", "tags": ["default"]}}, "/profile-metanome": {"get": {"responses": {"500": {"description": "Cannot connect to Metanome"}, "200": {"description": "Success"}}, "description": "Runs Metanome profiling for all tables, which is used to obtain KFK relations between the tables.", "operationId": "get_profile_metanome", "tags": ["default"]}}, "/profile-valentine": {"parameters": [{"description": "The id of the asset to get the table from", "in": "query", "type": "string", "required": "true", "name": "asset_id"}], "get": {"responses": {"404": {"description": "Table or asset does not exist"}, "403": {"description": "Table in asset has not been ingested yet"}, "400": {"description": "Missing asset id query parameter"}, "202": {"description": "Success", "schema": {"$ref": "#/definitions/TaskId"}}}, "description": "Runs Valentine profiling between the table in the given asset and all other ingested tables, used for finding columns that are related.", "operationId": "get_profile_valentine", "tags": ["default"]}}, "/purge": {"get": {"responses": {"200": {"description": "Success"}}, "description": "Purges all of the databases.", "operationId": "get_purge", "tags": ["default"]}}, "/task-status": {"parameters": [{"description": "ID of task to check", "in": "query", "type": "string", "required": "true", "name": "task_id"}], "get": {"responses": {"500": {"description": "Task could not be loaded from backend"}, "404": {"description": "Task does not exist"}, "400": {"description": "Missing task id query parameter"}, "200": {"description": "Success", "schema": {"$ref": "#/definitions/TaskStatus"}}}, "description": "Checks the status of a task.", "operationId": "get_task_status", "tags": ["default"]}}}, "info": {"title": "API", "version": "1.0"}, "produces": ["application/json"], "consumes": ["application/json"], "tags": [{"name": "default", "description": "Default namespace"}], "definitions": {"TaskId": {"properties": {"task_id": {"type": "string"}, "type": {"type": "string"}}, "type": "object"}, "TaskStatus": {"properties": {"name": {"type": "string"}, "args": {"type": "string"}, "status": {"type": "string"}, "id": {"type": "string"}, "children": {"type": "array", "default": [], "items": {"$ref": "#/definitions/TaskStatus"}}, "parent": {"$ref": "#/definitions/TaskStatus"}}, "type": "object"}, "DeletedRelations": {"properties": {"deleted_relations": {"type": "array", "items": {"type": "string"}}}, "type": "object"}, "RelatedTables": {"properties": {"RelatedTables": {"type": "array", "items": {"$ref": "#/definitions/RelatedTable"}}}, "type": "object"}, "RelatedTable": {"properties": {"links": {"type": "array", "items": {"type": "string"}}, "explanation": {"type": "string"}}, "type": "object"}, "JoinableTables": {"properties": {"JoinableTables": {"type": "array", "items": {"$ref": "#/definitions/JoinableTable"}}}, "type": "object"}, "JoinableTable": {"properties": {"matches": {"type": "array", "items": {"$ref": "#/definitions/Match"}}, "table_name": {"type": "string"}}, "type": "object"}, "Match": {"properties": {"PK": {"$ref": "#/definitions/Relation"}, "RELATED": {"$ref": "#/definitions/Profiles"}, "explanation": {"type": "string"}}, "type": "object"}, "Relation": {"properties": {"from_id": {"type": "string"}, "to_id": {"type": "string"}}, "type": "object"}, "Profiles": {"properties": {"coma": {"type": "number"}}, "type": "object"}}, "responses": {"ParseError": {"description": "When a mask can't be parsed"}, "MaskError": {"description": "When any error occurs on mask"}}}
